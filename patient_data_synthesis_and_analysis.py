# -*- coding: utf-8 -*-
"""patient Data Synthesis and Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13IF5k8IAeBmGFRPKdloVX8BZi-QmRmEK
"""

list = [4, 13, 0, 9, 0, 1, 2, 34]
number = list[::2]
print(number)

list1 = [4, 13, 0, 9, 'a', 1, 2, 34]
for num in list1:
  if isinstance(num, (int, float)) and num !=0:
    print(f"1/{num}")
  else:
    print(f"not possible {num}")

number = [4, 13, 0, 9, 0, 1, 2, 34]
for i in range(len(number)):
  for j in range(0, len(number)-i-1):
    if (type(number[j] == int or type[number[j]] == float) and (type(number[j+1] == int or type[number[j+1]] == float))):
      if number[j] > number[j+1]:
       number[j],number[j+1] = number[j+1], number[j]
       print(number)

pip install transformers

# Install necessary libraries if not already installed
# pip install pandas numpy transformers

import pandas as pd
import numpy as np
from transformers import pipeline

# Step 1: Generate Synthetic Patient Health Records

def generate_synthetic_health_records(num_records):
    # Sample data
    names = ["John Doe", "Jane Smith", "Alice Johnson", "Bob Brown", "Charlie Davis"]
    genders = ["Male", "Female", "Other"]
    heights = np.random.randint(150, 200, size=num_records)  # Height in cm
    weights = np.random.randint(50, 120, size=num_records)   # Weight in kg

    # Dictionary of conditions and their corresponding medications
    conditions = {
        "Diabetes": ["Metformin", "Insulin", "Glyburide", "Acarbose"],
        "Hypertension": ["Lisinopril", "Amlodipine", "Losartan", "Hydrochlorothiazide"],
        "Asthma": ["Albuterol", "Salmeterol", "Fluticasone", "Montelukast"],
        "Heart Disease": ["Aspirin", "Atorvastatin", "Beta Blockers", "ACE Inhibitors"],
        "None": ["No medication"]
    }

    allergies = ["None", "Peanuts", "Shellfish", "Penicillin", "Aspirin"]
    lifestyles = ["Smoker", "Non-Smoker", "Occasional Drinker", "Regular Drinker", "Active", "Sedentary"]

    records = []

    for i in range(num_records):
        name = np.random.choice(names)
        age = np.random.randint(20, 80)
        gender = np.random.choice(genders)
        condition = np.random.choice(list(conditions.keys()))
        medication = np.random.choice(conditions[condition])  # Randomly select medication for the condition
        visit_date = pd.Timestamp.now() - pd.DateOffset(days=np.random.randint(1, 365))  # Random past date
        blood_pressure = f"{np.random.randint(110, 180)}/{np.random.randint(60, 120)}"  # Random BP
        cholesterol_level = np.random.randint(150, 300)  # Random cholesterol level
        allergy = np.random.choice(allergies)
        lifestyle = np.random.choice(lifestyles)

        records.append({
            "Name": name,
            "Age": age,
            "Gender": gender,
            "Height (cm)": heights[i],
            "Weight (kg)": weights[i],
            "Condition": condition,
            "Medication": medication,
            "Visit Date": visit_date,
            "Blood Pressure": blood_pressure,
            "Cholesterol Level": cholesterol_level,
            "Allergies": allergy,
            "Lifestyle": lifestyle
        })

    return pd.DataFrame(records)

# Create Synthetic Data
num_records = 10000  # Number of synthetic records to generate
synthetic_data = generate_synthetic_health_records(num_records)

# Display the first few generated synthetic data records
print("Synthetic Patient Health Records:")
print(synthetic_data.head())

# Save to Excel
output_file = "synthetic_patient_health_records.xlsx"
synthetic_data.to_excel(output_file, index=False)

print(f"\nSynthetic patient health records saved to {output_file}.")



# Step 3: Summarize the Patient Health Records using LLM
def summarize_records(data):
    # Load a pre-trained summarization model
    summarizer = pipeline("summarization")

    # Prepare the records for summarization
    summaries = []
    for index, row in data.iterrows():
        record_summary = f"Patient {row['Name']}, Age {row['Age']}, Condition: {row['Condition']}, Medication: {row['Medication']}"
        summaries.append(record_summary)

    # Generate a summary of the health records
    full_summary = "\n".join(summaries)

    # Limit the input length if necessary
    max_input_length = 500  # You can adjust this based on model capability
    if len(full_summary) > max_input_length:
        full_summary = full_summary[:max_input_length]  # Truncate if too long

    summary = summarizer(full_summary, max_length=50, min_length=25, do_sample=False)

    return summary[0]['summary_text']

# Step 4: Generate and Print Summary
summary = summarize_records(synthetic_data)
print("\nSummary of Patient Health Records:")
print(summary)